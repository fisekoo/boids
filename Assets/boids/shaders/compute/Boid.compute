#pragma kernel CSMain
#define GROUP_SIZE 256
#include "UnityCG.cginc"
float hash( float n )
{
	return frac(sin(n)*43758.5453);
}
// The noise function returns a value in the range -1.0f -> 1.0f
float noise1( float3 x )
{
	float3 p = floor(x);
	float3 f = frac(x);

	f       = f*f*(3.0-2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

#include "Assets/boids/shaders/HLSL/boid-data.hlsl"
RWStructuredBuffer<Boid> _BoidsBuffer;
StructuredBuffer<float4> _PredatorsBuffer;
CBUFFER_START(Params)
	uint _BoidCount, _PredatorCount;
	float _DeltaTime;
	float _Speed, _SpeedVariation;
	float _OrbitSpeed;
	float _SeperationFactor;
	float _AlignmentFactor;
	float _CohesionFactor;
	float _PredatorScare;
	float3 _TargetPosition;
CBUFFER_END

[numthreads(GROUP_SIZE, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint instanceID = id.x;
    Boid boid = _BoidsBuffer[id.x];

	float noise = clamp(noise1(_Time / 100.0 + boid.noise_offset), -1, 1) * 2.0 - 1.0;
	float velocity = _Speed * (1.0 + noise * _SpeedVariation);
	float seperationSq = _SeperationFactor * _SeperationFactor;
	float3 boid_pos = boid.position;

	float3 seperation = 0;
	float3 alignment = 0;
	float3 cohesion = _TargetPosition;
	float3 predator = 0;
	uint nearbyCount = 1;
	// PREDATOR CALCULATION
	for (uint i = 0; i < _PredatorCount; i++)
	{
		float3 predatorPos = _PredatorsBuffer[i].xyz;
		float1 predatorRadiusSq = _PredatorsBuffer[i].w * _PredatorsBuffer[i].w; // 4
		float3 vToPredator = boid.position - predatorPos.xyz;
		float1 lengthSqToPredator = dot(vToPredator, vToPredator);
		if(lengthSqToPredator < predatorRadiusSq)
		{
			float1 scaler = saturate(1.0 - lengthSqToPredator / predatorRadiusSq);
			velocity = max(velocity, velocity * length(vToPredator * scaler * scaler * _PredatorScare.xxx));
			predator += normalize(vToPredator) * scaler * scaler;
		}
	}

	// BOID BEHAVIOUR CALCULATION
	for(uint i = 0; i < _BoidCount; i++){
		if(i == instanceID) continue;

		Boid otherBoid = _BoidsBuffer[i];
		float3 otherBoid_position = otherBoid.position;

		float3 vToBoid = boid_pos - otherBoid_position;
		float1 lengthSqToBoid = dot(vToBoid, vToBoid);

		if(lengthSqToBoid < seperationSq){
			float scaler = saturate(1.0 - lengthSqToBoid / seperationSq);
			seperation += vToBoid * (scaler / lengthSqToBoid);
			alignment += otherBoid.direction;
			cohesion += otherBoid_position;
			nearbyCount++;
		}
	}
	float avg = 1.0 / (float)nearbyCount;
	alignment *= avg;
	cohesion *= avg;
	cohesion = normalize(cohesion - boid_pos);

	float3 direction = (alignment * _AlignmentFactor) + (cohesion * _CohesionFactor) + seperation + (predator * 7);
	float ip = exp(-_OrbitSpeed * _DeltaTime);
	boid.direction = lerp(direction, normalize(boid.direction), ip.xxx);
	boid.position += boid.direction * velocity * _DeltaTime;
	
	// LIMITING POSITION IN WORLD Y
	if(boid.position.y > -1.0)
	{
		boid.position.y = -1.0;
		boid.direction = reflect(boid.direction, float3(0.0, -1.0, 0.0));
	}
	_BoidsBuffer[id.x] = boid;
}